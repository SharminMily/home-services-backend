generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  phone            Int?
  photo            String?
  password         String
  // needPasswordChange Boolean? @default(true)
  address           String
  gender           Gender?
  role             UserRole          @default(user)
  status           UserStatus        @default(active)
  bookings         Booking[]
  reviews          Review[]
  service_provider ServiceProvider[]
  createdAt        DateTime          @default(now())
  updateAt         DateTime          @default(now())
}

model Service {
  id               String            @id @default(uuid())
  title            String
  description      String
  category_id     String
  category         Categories        @relation(fields: [category_id], references: [id])
  image            String
  price            Int
  document         String?
  location_id   String
  location     AvailableLocation @relation(fields: [location_id], references: [id]) 
  service_provider ServiceProvider[]
  booking          Booking[]  
  reviews          Review[]
  createdAt        DateTime          @default(now())
}

model ServiceProvider {
  id         String            @id @default(uuid())
  user_id     String            @unique
  user       User              @relation(fields: [user_id], references: [id])
  services   Service[]
  bookings   Booking[]
  rating     Int               @default(0)
  documents  String?
  location_id String
  location   AvailableLocation @relation(fields: [location_id], references: [id])
  createdAt  DateTime          @default(now())
}

model Categories {
  id       String    @id @default(uuid())
  name     String
  image    String?
  popular  Boolean?  @default(false)
  featured Boolean?  @default(false)
  latest   Boolean?  @default(false)
  service  Service[]
}

model Booking {
  id          String          @id @default(uuid())
  user_id      String
  user        User            @relation(fields: [user_id], references: [id])
  service_id   String
  service     Service         @relation(fields: [service_id], references: [id])
  provider_id  String
  provider    ServiceProvider @relation(fields: [provider_id], references: [id])
  status      Status          @default(pending)
  scheduledAt DateTime
  createdAt   DateTime        @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  user_id    String
  user      User     @relation(fields: [user_id], references: [id])
  service_id String
  service   Service  @relation(fields: [service_id], references: [id])
  createdAt DateTime @default(now())
}

model AvailableLocation {
  id               String            @id @default(uuid())
  division         String
  district         String
  area             String
  lat              String
  lon              Float
  address          String
  service Service[]
  service_provider ServiceProvider[]
}

model Division {
 id               String            @id @default(uuid())
  name      String
  districts District[]
}

model District {
 id               String            @id @default(uuid())
  name       String
  division   Division  @relation(fields: [divisionId], references: [id])
  divisionId Int
  upazilas   Upazila[]
}

model Upazila {
  id               String            @id @default(uuid())
  name       String
  district   District  @relation(fields: [districtId], references: [id])
  districtId Int
}


enum UserRole {
  admin
  user
  services_provider
}

enum UserStatus {
  active
  blocked
  deleted
}

enum Gender {
  male
  female
  Other
}

enum Status {
  pending
  accepted
  complated
  cancelled
  failed
}
